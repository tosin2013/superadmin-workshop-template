---
- hosts: all
  connection: local
  gather_facts: false
  vars:
    controller_configuration_projects_async_retries: 120
    controller_configuration_projects_async_delay: 2
    controller_username: "{{ vault_controller_username | default(lookup('env', 'CONTROLLER_USERNAME')) }}"
    controller_password: "{{ vault_controller_password | default(lookup('env', 'CONTROLLER_PASSWORD')) }}"
    controller_hostname: "{{ vault_controller_hostname | default(lookup('env', 'CONTROLLER_HOST')) }}"
    controller_validate_certs: "{{ vault_controller_validate_certs | default(lookup('env', 'CONTROLLER_VERIFY_SSL')) }}"
  pre_tasks:
    - debug:
        msg:
          - "'{{ lookup('ansible.builtin.env', 'CONTROLLER_HOST') }}'"
          - "{{ lookup('ansible.builtin.pipe', 'env') }}"
    - name: "Setup authentication (block)"
      block:
        - name: "Get the Authentication Token for the future requests"
          ansible.builtin.uri:
            url: "https://{{ controller_hostname }}/api/v2/tokens/"
            user: "{{ controller_username }}"
            password: "{{ controller_password }}"
            method: POST
            force_basic_auth: true
            validate_certs: "{{ controller_validate_certs }}"
            status_code: 201
          register: authtoken_res

        - name: "Set the oauth token to be used since now"
          ansible.builtin.set_fact:
            controller_oauthtoken: "{{ authtoken_res.json.token }}"
            controller_oauthtoken_url: "{{ authtoken_res.json.url }}"
      no_log: "{{ controller_configuration_filetree_read_secure_logging | default('false') }}"
      when: controller_oauthtoken is not defined
      tags:
        - always
    - name: "Clone the required repo"
      environment:
        - GIT_SSL_NO_VERIFY: "{{ git_ssl_no_verify | default(true) }}"
      ansible.builtin.git:
        repo: "{{ project_to_clone | ansible.builtin.regex_replace('http://','http://'+gitlab_api_user+':'+gitlab_api_token+'@') }}"
        dest: "./checkout"
        version: "{{ casc_gitlab_scm_branch }}"
      no_log: true
      tags:
        - always
  roles:
    - role: infra.controller_configuration.filetree_read
      vars:
        filetree_controller_settings: "./checkout/{{ dir_orgs_vars }}/{{ orgs }}/env/{{ env }}/controller_settings.d/"
        filetree_controller_organizations: "./checkout/{{ dir_orgs_vars }}/{{ orgs }}/env/common/controller_organizations.d/"
        filetree_controller_labels: "./checkout/{{ dir_orgs_vars }}/{{ orgs }}/env/common/controller_labels.d/"
        filetree_controller_user_accounts: "./checkout/{{ dir_orgs_vars }}/{{ orgs }}/env/{{ env }}/controller_users.d/"
        filetree_controller_teams: "./checkout/{{ dir_orgs_vars }}/{{ orgs }}/env/common/controller_teams.d/"
        filetree_controller_credential_types: "./checkout/{{ dir_orgs_vars }}/{{ orgs }}/env/common/controller_credential_types.d/"
        filetree_controller_credentials:
          - "./checkout/{{ dir_orgs_vars }}/{{ orgs }}/env/{{ env }}/controller_credentials.d/"
          - "./checkout/{{ dir_orgs_vars }}/{{ orgs }}/env/common/controller_credentials.d/"
        filetree_controller_credential_input_sources: "./checkout/{{ dir_orgs_vars }}/{{ orgs }}/env/common/controller_credential_input_sources.d/"
        filetree_controller_notifications: "./checkout/{{ dir_orgs_vars }}/{{ orgs }}/env/common/controller_notification_templates.d/"
        filetree_controller_projects: "./checkout/{{ dir_orgs_vars }}/{{ orgs }}/env/common/controller_projects.d/"
        filetree_controller_execution_environments: "./checkout/{{ dir_orgs_vars }}/{{ orgs }}/env/{{ env }}/controller_execution_environments.d/"
        filetree_controller_applications: "./checkout/{{ dir_orgs_vars }}/{{ orgs }}/env/common/controller_applications.d/"
        filetree_controller_inventories: "./checkout/{{ dir_orgs_vars }}/{{ orgs }}/env/common/controller_inventories.d/"
        filetree_controller_inventory_sources: "./checkout/{{ dir_orgs_vars }}/{{ orgs }}/env/{{ env }}/controller_inventory_sources.d/"
        filetree_controller_instance_groups: "./checkout/{{ dir_orgs_vars }}/{{ orgs }}/env/{{ env }}/controller_instance_groups.d/"
        filetree_controller_hosts: "./checkout/{{ dir_orgs_vars }}/{{ orgs }}/env/{{ env }}/controller_hosts.d/"
        filetree_controller_groups: "./checkout/{{ dir_orgs_vars }}/{{ orgs }}/env/common/controller_groups.d/"
        filetree_controller_templates: "./checkout/{{ dir_orgs_vars }}/{{ orgs }}/env/common/controller_job_templates.d/"
        filetree_controller_workflow_job_templates: "./checkout/{{ dir_orgs_vars }}/{{ orgs }}/env/common/controller_workflow_job_templates.d/"
        filetree_controller_schedules: "./checkout/{{ dir_orgs_vars }}/{{ orgs }}/env/common/controller_schedules.d/"
        filetree_controller_roles: "./checkout/{{ dir_orgs_vars }}/{{ orgs }}/env/common/controller_roles.d/"
        # assign_galaxy_credentials_to_org: false
        # filetree_controller_credentials:
        #   - "./checkout/{{ dir_orgs_vars }}/{{ orgs }}/env/{{ env }}/controller_credentials.d/"
        #   - "./checkout/{{ dir_orgs_vars }}/{{ orgs }}/env/common/controller_credentials.d/"
    # - {role: infra.controller_configuration.dispatch, assign_galaxy_credentials_to_org: false}
    - {role: infra.controller_configuration.dispatch}

    # 39     - {role: infra.controller_configuration.filetree_read, assign_galaxy_credentials_to_org: false, assign_default_ee_to_org: false}
    # 40     - {role: infra.controller_configuration.dispatch, assign_galaxy_credentials_to_org: false, assign_default_ee_to_org: false }

  post_tasks:
    - block:
        - name: Include Tasks to load Galaxy credentials to be added to Organizations
          ansible.builtin.include_role:
            name: infra.controller_configuration.filetree_read
            tasks_from: organizations.yml
          vars:
            filetree_controller_organizations: "./checkout/{{ dir_orgs_vars }}/{{ orgs }}/env/common/controller_organizations.d/"
            filetree_controller_credentials: "./checkout/{{ dir_orgs_vars }}/{{ orgs }}/env/{{ env }}/controller_credentials.d/"

        - name: Include Tasks to add Galaxy credentials to Organizations
          ansible.builtin.include_role:
            name: infra.controller_configuration.dispatch
            apply:
              tags:
                - organizations
          vars:
            controller_configuration_dispatcher_roles:
              - {role: organizations, var: controller_organizations, tags: organizations}
      tags:
        - organizations

    - name: "Delete the Authentication Token used"
      ansible.builtin.uri:
        url: "https://{{ controller_hostname }}{{ controller_oauthtoken_url }}"
        user: "{{ controller_username }}"
        password: "{{ controller_password }}"
        method: DELETE
        force_basic_auth: true
        validate_certs: "{{ controller_validate_certs }}"
        status_code: 204
      when: controller_oauthtoken_url is defined
...
# ansible-navigator run casc_ctrl_config.yml -i inventory -l PRE -e '{orgs: SUPERADMIN, dir_orgs_vars: orgs_vars, env: PRE}' -m stdout --eei AH.PRE/ee-casc:latest --vault-password-file .vault_password --pull-arguments=--tls-verify=false
# ansible-navigator run casc_ctrl_config.yml -i inventory -l PRO -e '{orgs: SUPERADMIN, dir_orgs_vars: orgs_vars, env: PRO}' -m stdout --eei AH.PRO/ee-casc:latest --vault-password-file .vault_password --pull-arguments=--tls-verify=false
#
# ansible-navigator run casc_ctrl_config.yml -i inventory -l PRE -e '{orgs: SUPERADMIN, dir_orgs_vars: orgs_vars, env: PRE}' -m stdout --eei quay.io/automationiberia/aap/ee-casc --vault-password-file .vault_password
# ansible-navigator run casc_ctrl_config.yml -i inventory -l PRO -e '{orgs: SUPERADMIN, dir_orgs_vars: orgs_vars, env: PRO}' -m stdout --eei quay.io/automationiberia/aap/ee-casc --vault-password-file .vault_password
